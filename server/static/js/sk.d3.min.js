/* skd3 version 0.2.0 (https://github.com/fabriciorhs/skd3) 2017-09-20 */

!function () {
    var t = {};
    t.alertVersion = function () {
        alert(this.version)
    }, "undefined" != typeof module && "undefined" != typeof exports && "undefined" == typeof d3 && (d3 = require("d3")), "undefined" != typeof module && "undefined" != typeof exports && (module.exports = t), "undefined" != typeof window && (window.sk = t), function (t, n) {
        "object" == typeof exports && "undefined" != typeof module ? n(exports, require("d3-array"), require("d3-collection"), require("d3-shape")) : "function" == typeof define && define.amd ? define(["exports", "d3-array", "d3-collection", "d3-shape"], n) : n(t.d3 = t.d3 || {}, t.d3, t.d3, t.d3)
    }(this, function (t, n, e, r) {
        "use strict";

        function o(t) {
            return t.target.depth
        }

        function i(t, n) {
            return t.sourceLinks.length ? t.depth : n - 1
        }

        function u(t) {
            return function () {
                return t
            }
        }

        function a(t, n) {
            return d(t.source, n.source) || t.index - n.index
        }

        function s(t, n) {
            return d(t.target, n.target) || t.index - n.index
        }

        function d(t, n) {
            return t.y0 - n.y0
        }

        function c(t) {
            return t.value
        }

        function l(t) {
            return (t.y0 + t.y1) / 2
        }

        function f(t) {
            return l(t.source) * t.value
        }

        function h(t) {
            return l(t.target) * t.value
        }

        function p(t) {
            return t.index
        }

        function g(t) {
            return t.nodes
        }

        function y(t) {
            return t.links
        }

        function m(t, n) {
            var e = t.get(n);
            if (!e) throw new Error("missing: " + n);
            return e
        }

        function v(t) {
            return [t.source.x1, t.y0]
        }

        function x(t) {
            return [t.target.x0, t.y1]
        }

        t.sankey = function () {
            function t() {
                var t = {nodes: W.apply(null, arguments), links: C.apply(null, arguments)};
                return r(t), o(t), v(t), x(t), k(t), t
            }

            function r(t) {
                t.nodes.forEach(function (t, n) {
                    t.index = n, t.sourceLinks = [], t.targetLinks = []
                });
                var n = e.map(t.nodes, S);
                t.links.forEach(function (t, e) {
                    t.index = e;
                    var r = t.source, o = t.target;
                    "object" != typeof r && (r = t.source = m(n, r)), "object" != typeof o && (o = t.target = m(n, o)), r.sourceLinks.push(t), o.targetLinks.push(t)
                })
            }

            function o(t) {
                t.nodes.forEach(function (t) {
                    t.value = Math.max(n.sum(t.sourceLinks, c), n.sum(t.targetLinks, c))
                })
            }

            function v(t) {
                var n, e, r;
                for (n = t.nodes, e = [], r = 0; n.length; ++r, n = e, e = []) n.forEach(function (t) {
                    t.depth = r, t.sourceLinks.forEach(function (t) {
                        e.indexOf(t.target) < 0 && e.push(t.target)
                    })
                });
                for (n = t.nodes, e = [], r = 0; n.length; ++r, n = e, e = []) n.forEach(function (t) {
                    t.height = r, t.targetLinks.forEach(function (t) {
                        e.indexOf(t.source) < 0 && e.push(t.source)
                    })
                });
                var o = (L - w - M) / (r - 1);
                t.nodes.forEach(function (t) {
                    t.x1 = (t.x0 = w + Math.max(0, Math.min(r - 1, Math.floor(T.call(null, t, r)))) * o) + M
                })
            }

            function x(t) {
                function r() {
                    o.forEach(function (t) {
                        var n, e, r, o = b, i = t.length;
                        for (t.sort(d), r = 0; r < i; ++r) (e = o - (n = t[r]).y0) > 0 && (n.y0 += e, n.y1 += e), o = n.y1 + z;
                        if ((e = o - z - E) > 0) for (o = n.y0 -= e, n.y1 -= e, r = i - 2; r >= 0; --r) (e = (n = t[r]).y1 + z - o) > 0 && (n.y0 -= e, n.y1 -= e), o = n.y0
                    })
                }

                var o = e.nest().key(function (t) {
                    return t.x0
                }).sortKeys(n.ascending).entries(t.nodes).map(function (t) {
                    return t.values
                });
                !function () {
                    var e = n.min(o, function (t) {
                        return (E - b - (t.length - 1) * z) / n.sum(t, c)
                    });
                    o.forEach(function (t) {
                        t.forEach(function (t, n) {
                            t.y1 = (t.y0 = n) + t.value * e
                        })
                    }), t.links.forEach(function (t) {
                        t.width = t.value * e
                    })
                }(), r();
                for (var i = 1, u = A; u > 0; --u) !function (t) {
                    o.slice().reverse().forEach(function (e) {
                        e.forEach(function (e) {
                            if (e.sourceLinks.length) {
                                var r = (n.sum(e.sourceLinks, h) / n.sum(e.sourceLinks, c) - l(e)) * t;
                                e.y0 += r, e.y1 += r
                            }
                        })
                    })
                }(i *= .99), r(), function (t) {
                    o.forEach(function (e) {
                        e.forEach(function (e) {
                            if (e.targetLinks.length) {
                                var r = (n.sum(e.targetLinks, f) / n.sum(e.targetLinks, c) - l(e)) * t;
                                e.y0 += r, e.y1 += r
                            }
                        })
                    })
                }(i), r()
            }

            function k(t) {
                t.nodes.forEach(function (t) {
                    t.sourceLinks.sort(s), t.targetLinks.sort(a)
                }), t.nodes.forEach(function (t) {
                    var n = t.y0, e = n;
                    t.sourceLinks.forEach(function (t) {
                        t.y0 = n + t.width / 2, n += t.width
                    }), t.targetLinks.forEach(function (t) {
                        t.y1 = e + t.width / 2, e += t.width
                    })
                })
            }

            var w = 0, b = 0, L = 1, E = 1, M = 24, z = 8, S = p, T = i, W = g, C = y, A = 32;
            return t.update = function (t) {
                return k(t), t
            }, t.nodeId = function (n) {
                return arguments.length ? (S = "function" == typeof n ? n : u(n), t) : S
            }, t.nodeAlign = function (n) {
                return arguments.length ? (T = "function" == typeof n ? n : u(n), t) : T
            }, t.nodeWidth = function (n) {
                return arguments.length ? (M = +n, t) : M
            }, t.nodePadding = function (n) {
                return arguments.length ? (z = +n, t) : z
            }, t.nodes = function (n) {
                return arguments.length ? (W = "function" == typeof n ? n : u(n), t) : W
            }, t.links = function (n) {
                return arguments.length ? (C = "function" == typeof n ? n : u(n), t) : C
            }, t.size = function (n) {
                return arguments.length ? (w = b = 0, L = +n[0], E = +n[1], t) : [L - w, E - b]
            }, t.extent = function (n) {
                return arguments.length ? (w = +n[0][0], L = +n[1][0], b = +n[0][1], E = +n[1][1], t) : [[w, b], [L, E]]
            }, t.iterations = function (n) {
                return arguments.length ? (A = +n, t) : A
            }, t
        }, t.sankeyCenter = function (t) {
            return t.targetLinks.length ? t.depth : t.sourceLinks.length ? n.min(t.sourceLinks, o) - 1 : 0
        }, t.sankeyLeft = function (t) {
            return t.depth
        }, t.sankeyRight = function (t, n) {
            return n - 1 - t.height
        }, t.sankeyJustify = i, t.sankeyLinkHorizontal = function () {
            return r.linkHorizontal().source(v).target(x)
        }, Object.defineProperty(t, "__esModule", {value: !0})
    }), function (t, n) {
        if ("function" == typeof define && define.amd) define(["d3"], n); else if ("object" == typeof module && module.exports) {
            var e = require("d3");
            module.exports = n(e)
        } else t.d3.tip = n(t.d3)
    }(this, function (t) {
        return function () {
            function n(t) {
                l = r(t), f = l.createSVGPoint(), document.body.appendChild(c)
            }

            function e() {
                var n = t.select(document.createElement("div"));
                return n.style("position", "absolute").style("top", 0).style("opacity", 0).style("pointer-events", "none").style("box-sizing", "border-box"), n.node()
            }

            function r(t) {
                return "svg" === (t = t.node()).tagName.toLowerCase() ? t : t.ownerSVGElement
            }

            function o() {
                return null === c && (c = e(), document.body.appendChild(c)), t.select(c)
            }

            function i() {
                for (var n = h || t.event.target; void 0 === n.getScreenCTM && "undefined" === n.parentNode;) n = n.parentNode;
                var e = {}, r = n.getScreenCTM(), o = n.getBBox(), i = o.width, u = o.height, a = o.x, s = o.y;
                return f.x = a, f.y = s, e.nw = f.matrixTransform(r), f.x += i, e.ne = f.matrixTransform(r), f.y += u, e.se = f.matrixTransform(r), f.x -= i, e.sw = f.matrixTransform(r), f.y -= u / 2, e.w = f.matrixTransform(r), f.x += i, e.e = f.matrixTransform(r), f.x -= i / 2, f.y -= u / 2, e.n = f.matrixTransform(r), f.y += u, e.s = f.matrixTransform(r), e
            }

            function u(t) {
                return "function" == typeof t ? t : function () {
                    return t
                }
            }

            var a = function () {
                return "n"
            }, s = function () {
                return [0, 0]
            }, d = function () {
                return " "
            }, c = e(), l = null, f = null, h = null;
            n.show = function () {
                var t = Array.prototype.slice.call(arguments);
                t[t.length - 1] instanceof SVGElement && (h = t.pop());
                var e, r = d.apply(this, t), i = s.apply(this, t), u = a.apply(this, t), c = o(), l = g.length,
                    f = document.documentElement.scrollTop || document.body.scrollTop,
                    y = document.documentElement.scrollLeft || document.body.scrollLeft;
                for (c.html(r).style("opacity", 1).style("pointer-events", "all"); l--;) c.classed(g[l], !1);
                return e = p.get(u).apply(this), c.classed(u, !0).style("top", e.top + i[0] + f + "px").style("left", e.left + i[1] + y + "px"), n
            }, n.hide = function () {
                return o().style("opacity", 0).style("pointer-events", "none"), n
            }, n.attr = function (e, r) {
                if (arguments.length < 2 && "string" == typeof e) return o().attr(e);
                var i = Array.prototype.slice.call(arguments);
                return t.selection.prototype.attr.apply(o(), i), n
            }, n.style = function (e, r) {
                if (arguments.length < 2 && "string" == typeof e) return o().style(e);
                var i = Array.prototype.slice.call(arguments);
                return t.selection.prototype.style.apply(o(), i), n
            }, n.direction = function (t) {
                return arguments.length ? (a = null == t ? t : u(t), n) : a
            }, n.offset = function (t) {
                return arguments.length ? (s = null == t ? t : u(t), n) : s
            }, n.html = function (t) {
                return arguments.length ? (d = null == t ? t : u(t), n) : d
            }, n.destroy = function () {
                return c && (o().remove(), c = null), n
            };
            var p = t.map({
                n: function () {
                    var t = i();
                    return {top: t.n.y - c.offsetHeight, left: t.n.x - c.offsetWidth / 2}
                }, s: function () {
                    var t = i();
                    return {top: t.s.y, left: t.s.x - c.offsetWidth / 2}
                }, e: function () {
                    var t = i();
                    return {top: t.e.y - c.offsetHeight / 2, left: t.e.x}
                }, w: function () {
                    var t = i();
                    return {top: t.w.y - c.offsetHeight / 2, left: t.w.x - c.offsetWidth}
                }, nw: function () {
                    var t = i();
                    return {top: t.nw.y - c.offsetHeight, left: t.nw.x - c.offsetWidth}
                }, ne: function () {
                    var t = i();
                    return {top: t.ne.y - c.offsetHeight, left: t.ne.x}
                }, sw: function () {
                    var t = i();
                    return {top: t.sw.y, left: t.sw.x - c.offsetWidth}
                }, se: function () {
                    var t = i();
                    return {top: t.se.y, left: t.e.x}
                }
            }), g = p.keys();
            return n
        }
    }), t.createSankey = function (t, n, e) {
        function r(t) {
            return n.links.formatValue ? n.links.formatValue(t) : t + " " + n.links.unit
        }

        var o = function (t) {
            return Math.max(t, Number.MIN_VALUE)
        }, i = {nodes: [], links: []};
        e.nodes.map(function (t) {
            i.nodes.push({name: t.name, color: t.color, id: t.id})
        }), e.links.map(function (t) {
            i.links.push({source: t.source, target: t.target, id: t.id, value: o(t.value)})
        });
        !function (t) {
            for (var n = 0; n < t.length; n++) void 0 == t[n].id && (t[n].id = t[n].source + " -> " + t[n].target)
        }(i.links), d3.select(".d3-tip-nodes").remove(), d3.select(".d3-tip").remove(), d3.select(t + " svg").remove();
        var u, a = d3.select(t), s = function (t, n) {
                var e = t.node().getBoundingClientRect();
                return {width: e.width - n.left - n.right, height: e.height - n.top - n.bottom}
            }(a, n.margin),
            d = a.append("svg").attr("width", s.width + n.margin.left + n.margin.right).attr("height", s.height + n.margin.top + n.margin.bottom).attr("class", "sk-svg").append("g").attr("transform", "translate(" + n.margin.left + "," + n.margin.top + ")"),
            c = d3.sankey().nodeWidth(15).nodePadding(10).extent([[0, 0], [s.width, s.height]]),
            l = d3.sankeyLinkHorizontal(), f = function (t) {
                return n.nodes.fontSize
            }, h = function (t) {
            };
        n.nodes.dynamicSizeFontNode.enabled && (u = d3.scaleLinear().range([n.nodes.dynamicSizeFontNode.minSize, n.nodes.dynamicSizeFontNode.maxSize]), h = function (t) {
            u.domain(d3.extent(t, function (t) {
                return t.value
            }))
        }, f = function (t) {
            return Math.floor(u(t.value))
        });
        var p = !1, g = !0;
        void 0 != n.nodes.draggableX && (p = n.nodes.draggableX), void 0 != n.nodes.draggableY && (g = n.nodes.draggableY);
        for (var y = 0; y < i.nodes.length; y++) void 0 == i.nodes[y].color && (i.nodes[y].color = n.nodes.colors(i.nodes[y].name.replace(/ .*/, "")));
        var m = d3.tip().attr("class", "d3-tip").offset([-10, 0]),
            v = d3.tip().attr("class", "d3-tip d3-tip-nodes").offset([-10, 0]);
        m.html(function (t) {
            var n, e;
            return i.links.indexOf(t.source.name) > -1 ? (e = t.source.name, n = t.target.name) : (e = t.target.name, n = t.source.name), '<div class="table-wrapper"><center><h1>' + n + '</h1></center><table><tr><td class="col-left">' + e + '</td><td align="right">' + r(t.value) + "</td></tr></table></div>"
        });
        var x = d3.select(".sk-svg").node().getBoundingClientRect().top;
        m.move = function (t) {
            m.style("top", function () {
                return d3.event.pageY - x - 65 >= 0 ? d3.event.pageY - 65 + "px" : d3.event.pageY + 20 + "px"
            }).style("left", function () {
                var t = Math.max(d3.event.pageX - 65, 10);
                return (t = Math.min(t, window.innerWidth - d3.select(".d3-tip").node().getBoundingClientRect().width - 20)) + "px"
            })
        }, v.html(function (t) {
            var e, o = t.name, i = t.targetLinks, u = t.sourceLinks;
            for (e = '<div class="table-wrapper"><center><h1>' + o + "</h1></center><table>", i.length > 0 & u.length > 0 && (e += "<tr><td><h2>" + n.tooltip.labelSource + "</h2></td><td></td></tr>"), y = 0; y < i.length; ++y) e += '<tr><td class="col-left">' + i[y].source.name + '</td><td align="right">' + r(i[y].value) + "</td></tr>";
            for (i.length > 0 & u.length > 0 && (e += "<tr><td></td><td></td><tr><td></td><td></td> </tr><tr><td><h2>" + n.tooltip.labelTarget + "</h2></td><td></td></tr>"), y = 0; y < u.length; ++y) e += '<tr><td class="col-left">' + u[y].target.name + '</td><td align="right">' + r(u[y].value) + "</td></tr>";
            return e += "</table></div>"
        }), v.move = function (t) {
            v.boxInfo = d3.select(".d3-tip-nodes").node().getBoundingClientRect(), v.style("top", function () {
                return d3.event.pageY - x - v.boxInfo.height - 20 >= 0 ? d3.event.pageY - v.boxInfo.height - 20 + "px" : d3.event.pageY + 20 + "px"
            }).style("left", function () {
                var t = Math.max(d3.event.pageX - 130, 10);
                return (t = Math.min(t, window.innerWidth - d3.select(".d3-tip").node().getBoundingClientRect().width - 20)) + "px"
            })
        }, d.call(m), d.call(v);
        var k = function () {
            m && m.hide(), v && v.hide()
        };
        c(i), h(i.nodes);
        var w = d.append("g").selectAll(".sk-link").data(i.links, function (t) {
            return t.id
        }).enter().append("path").attr("class", "sk-link").attr("d", l).style("stroke", function (t) {
            return t.source.color
        }).style("stroke-width", function (t) {
            return Math.max(1, t.width) + "px"
        }).sort(function (t, n) {
            return n.width - t.width
        });
        n.tooltip.infoDiv ? w.on("mousemove", m.move).on("mouseover", m.show).on("mouseout", m.hide) : w.append("title").text(function (t) {
            return t.source.name + " -> " + t.target.name + "\n" + r(t.value)
        });
        var b = d.append("g").selectAll(".sk-node").data(i.nodes, function (t) {
            return t.name
        }).enter().append("g").attr("class", "sk-node").attr("transform", function (t) {
            return "translate(" + t.x0 + "," + t.y0 + ")"
        });
        n.tooltip.infoDiv ? b.on("mousemove", v.move).on("mouseover", v.show).on("mouseout", v.hide) : b.append("title").text(function (t) {
            return t.name + "\n" + r(t.value)
        }), (p || g) && b.call(d3.drag().subject(function (t) {
            return t
        }).on("start", function (t) {
            d3.event.sourceEvent.stopPropagation(), this.parentNode.appendChild(this)
        }).on("drag", function (t) {
            if (k(), p && d3.event.x < s.width && (t.x0 = Math.max(0, Math.min(s.width - c.nodeWidth(), t.x0 + d3.event.dx)), t.x1 = t.x0 + c.nodeWidth()), g && d3.event.y < s.height) {
                var n = t.y1 - t.y0;
                t.y0 = Math.max(0, Math.min(s.height - (t.y1 - t.y0), t.y0 + d3.event.dy)), t.y1 = t.y0 + n
            }
            d3.select(this).attr("transform", "translate(" + t.x0 + "," + t.y0 + ")"), c.update(i), w.attr("d", l)
        })), b.append("rect").attr("height", function (t) {
            return Math.abs(t.y1 - t.y0)
        }).attr("width", c.nodeWidth()).style("fill", function (t) {
            return t.color
        }).style("stroke", function (t) {
            return d3.rgb(t.color).darker(1.8)
        }), b.append("text").attr("x", -6).attr("y", function (t) {
            return (t.y1 - t.y0) / 2
        }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).style("fill", function (t) {
            return d3.rgb(t.color).darker(2.4)
        }).text(function (t) {
            return t.name
        }).style("font-size", function (t) {
            return f(t) + "px"
        }).filter(function (t) {
            return t.x0 < s.width / 2
        }).attr("x", 6 + c.nodeWidth()).attr("text-anchor", "start");
        var L = function (t) {
            k(), c(t), c.update(t), h(t.nodes), d.selectAll(".sk-link").data(t.links, function (t) {
                return t.id
            }).sort(function (t, n) {
                return n.width - t.width
            }).transition().duration(1300).attr("d", l).style("stroke-width", function (t) {
                return Math.max(1, t.width) + "px"
            }), d.selectAll(".sk-node").data(t.nodes, function (t) {
                return t.name
            }).transition().duration(1300).attr("transform", function (t) {
                return "translate(" + t.x0 + "," + t.y0 + ")"
            }), d.selectAll(".sk-node rect").transition().duration(1300).attr("height", function (t) {
                return Math.abs(t.y1 - t.y0)
            }), d.selectAll(".sk-node text").transition().duration(1300).attr("y", function (t) {
                return (t.y1 - t.y0) / 2
            }).style("font-size", function (t) {
                return f(t) + "px"
            })
        };
        return this.updateData = function (t) {
            for (var n = 0; n < t.links.length; n++) {
                var e = t.links[n].id || t.links[n].source + " -> " + t.links[n].target,
                    r = i.links.filter(function (t) {
                        return t.id == e
                    })[0];
                r && (r.value = o(t.links[n].value))
            }
            L(i)
        }, this
    }, t.version = "0.2.0"
}();
//# sourceMappingURL=sk.d3.min.js.map